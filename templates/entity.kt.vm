package ${package.Entity}

#foreach($pkg in ${table.importPackages})
import ${pkg}
#end
import com.baomidou.mybatisplus.annotation.*
import io.github.sagirikawaii01.centox.starter.toJson
import com.fasterxml.jackson.annotation.JsonFormat
import com.baomidou.mybatisplus.extension.kotlin.KtQueryWrapper
import com.baomidou.mybatisplus.extension.kotlin.KtUpdateWrapper
import io.github.sagirikawaii01.centox.mp.SqlDsl
import io.github.sagirikawaii01.centox.mp._SqlWrapperDsl

/**
    #if("$!{table.comment}" != "")
     * <p>
     * $!{table.comment}
     * </p>
    #end
    #foreach($field in ${table.fields})
        #if("$!field.comment" != "")
         * @property ${field.propertyName} ${field.comment}
        #elseif(${field.annotationColumnName} == "gmt_modify")
         * @property ${field.propertyName} 更新时间
        #elseif(${field.annotationColumnName} == "gmt_create")
         * @property ${field.propertyName} 创建时间
        #elseif(${field.annotationColumnName} == "is_deleted")
         * @property ${field.propertyName} 是否删除：0-未删除，1-已删除
        #end
    #end
 * @author ${author}
 * @since ${date}
 */
#if(${table.convert})
@TableName("${schemaName}${table.name}")
#end
#if(${superEntityClass})
open class ${entity} : ${superEntityClass}#if(${activeRecord})<${entity}>#end() {
#elseif(${activeRecord})
open class ${entity} : Model<${entity}>() {
#elseif(${entitySerialVersionUID})
open class ${entity} : Serializable, SqlDsl<${entity}> by dsl${table.name} {
#else
open class ${entity} {
#end

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end
    #if(${field.keyFlag})
        ## 主键
        #if(${field.keyIdentityFlag})
        @TableId(value = "${field.annotationColumnName}", type = IdType.AUTO)
        #elseif(!$null.isNull(${idType}) && "$!idType" != "")
        @TableId(value = "${field.annotationColumnName}", type = IdType.${idType})
        #elseif(${field.convert})
        @TableId("${field.annotationColumnName}")
        #end
        ## 普通字段
    #elseif(${field.fill})
        ## -----   存在字段填充设置   -----
        #if(${field.annotationColumnName} == "gmt_create" )
        @TableField(value = "${field.annotationColumnName}", fill = FieldFill.INSERT)
        #elseif(${field.annotationColumnName} == "gmt_modify" || ${field.annotationColumnName} == "gmt_modify")
        @TableField(value = "${field.annotationColumnName}", fill = FieldFill.INSERT_UPDATE)
        #else
        @TableField(fill = FieldFill.${field.fill}#if(${field.annotationColumnName} == "gmt_create"), fill = FieldFill.INSERT#end#if(${field.annotationColumnName} == "gmt_modify"), fill = FieldFill.INSERT_UPDATE#end)
        #end
    #elseif(${field.convert})
    @TableField(value = "${field.annotationColumnName}"#if(${field.annotationColumnName} == "gmt_create"), fill = FieldFill.INSERT#end#if(${field.annotationColumnName} == "gmt_modify"), fill = FieldFill.INSERT_UPDATE#end)
    #end
    ## 乐观锁注解
    #if(${field.versionField})
    @Version
    #end
    ## 逻辑删除注解
    #if(${field.logicDeleteField})
    @TableLogic
    #end
    #if(${field.propertyType} == "LocalTime")
    @JsonFormat(pattern = "HH:mm:ss", timezone = "GMT+8")
    #end
    #if(${field.propertyType} == "LocalDate")
    @JsonFormat(pattern = "yyyy-MM-dd", timezone = "GMT+8")
    #end
    #if(${field.propertyType} == "LocalDateTime")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    #end
    #if(${field.propertyType} == "Integer")
    var ${field.propertyName}: Int? = null
    #else
        var ${field.propertyName}: ${field.propertyType}? = null
    #end

#end
## ----------  END 字段循环遍历  ----------
#if(${entityColumnConstant})
    companion object {
        #foreach($field in ${table.fields})

            const val ${field.name.toUpperCase()} : String = "${field.name}"

        #end
    }

#end
#if(${activeRecord})
    override fun pkVal(): Serializable? {
        #if(${keyPropertyName})
            return ${keyPropertyName}
        #else
            return null
        #end
    }

#end
    override fun toString(): String {
        return this.toJson()
    }

    override fun dsl(): SqlDsl<${entity}> {
        return dsl${table.name}
    }

    companion object {
        private val dsl${table.name} = _SqlWrapperDsl(
            queryWrapperBuild = {
                KtQueryWrapper(${entity}::class.java)
            },
            updateWrapperBuild = {
                KtUpdateWrapper(${entity}::class.java)
            }
        )
    }
}

